---
# Source: router/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: router-test
  namespace: demo
  labels:
    app.kubernetes.io/name: router
    app.kubernetes.io/instance: router-test
    app.kubernetes.io/version: "v0.9.2"
---
# Source: router/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: router-test
  namespace: demo
  labels:
    app.kubernetes.io/name: router
    app.kubernetes.io/instance: router-test
    app.kubernetes.io/version: "v0.9.2"
data:
  managedFederationApiKey: "REDACTED"
---
# Source: router/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: schema-config
  namespace: demo
  labels:
    app.kubernetes.io/name: router
    app.kubernetes.io/instance: router-test
    app.kubernetes.io/version: "v0.9.2"
data:
  local.graphql: |
   schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
    {
      query: Query
    }

    directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

    directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

    type Book
      @join__type(graph: BOOKS, key: "id")
      @join__type(graph: LIBRARIES, key: "id")
    {
      id: ID! @join__field(graph: BOOKS) @join__field(graph: LIBRARIES, external: true)
      title: String @join__field(graph: BOOKS)
      author: String @join__field(graph: BOOKS)
      libraries: [Library] @join__field(graph: LIBRARIES)
    }

    scalar join__FieldSet

    enum join__Graph {
      BOOKS @join__graph(name: "books", url: "http://service-a.demo.svc.cluster.local:80/graphql")
      LIBRARIES @join__graph(name: "libraries", url: "http://service-c.demo.svc.cluster.local:80/graphql")
    }

    type Library
      @join__type(graph: LIBRARIES, key: "id")
    {
      id: ID!
      name: String
      address: String
      type: String
    }

    scalar link__Import

    enum link__Purpose {
      """
      `SECURITY` features provide metadata necessary to securely resolve fields.
      """
      SECURITY

      """
      `EXECUTION` features provide metadata necessary for operation execution.
      """
      EXECUTION
    }

    type Query
      @join__type(graph: BOOKS)
      @join__type(graph: LIBRARIES)
    {
      books: [Book] @join__field(graph: BOOKS)
      libraries: [Library] @join__field(graph: LIBRARIES)
    }

---
# Source: router/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: router-test
  namespace: demo
  labels:
    app.kubernetes.io/name: router
    app.kubernetes.io/instance: router-test
    app.kubernetes.io/version: "v0.9.2"
data:
  configuration.yaml: |
    server:
      listen: 0.0.0.0:80
    telemetry:
      metrics:
        prometheus:
          enabled: true          
---
# Source: router/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: router-test
  namespace: demo
  labels:
    app.kubernetes.io/name: router
    app.kubernetes.io/instance: router-test
    app.kubernetes.io/version: "v0.9.2"
  annotations:
      ingress.kubernetes.io/service-upstream: "true"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: router
    app.kubernetes.io/instance: router-test
---
# Source: router/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: router-test
  namespace: demo
  labels:
    app.kubernetes.io/name: router
    app.kubernetes.io/instance: router-test
    app.kubernetes.io/version: "v0.9.2"
  annotations:
    prometheus.io/path: /plugins/apollo.telemetry/prometheus
    prometheus.io/port: "80"
    prometheus.io/scrape: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: router
      app.kubernetes.io/instance: router-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: router
        app.kubernetes.io/instance: router-test
    spec:
      serviceAccountName: router-test
      securityContext:
        {}
      containers:
        - name: router
          securityContext:
            {}
          image: "ghcr.io/apollographql/router:v0.9.2"
          imagePullPolicy: IfNotPresent
          args:
            - --hot-reload
            - --config
            - /app/configuration.yaml
            - -s 
            - /app/local.graphql
          env:
            - name: APOLLO_KEY
              valueFrom:
                secretKeyRef:
                  name: router-test
                  key: managedFederationApiKey
            - name: APOLLO_GRAPH_REF
              value: "REDACTED"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
          readinessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
          resources:
            {}
          volumeMounts:
            - name: router-configuration
              mountPath: /app/configuration.yaml
              subPath: configuration.yaml
              readOnly: true
            - name: supergraph-schema
              mountPath: /app/local.graphql
              subPath: local.graphql
              readOnly: true

      volumes:
        - name: router-configuration
          configMap:
            name: router-test
        - name: supergraph-schema
          configMap: 
            name: schema-config

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api
  namespace: demo
  annotations:
    konghq.com/strip-path: "true"
spec:
  ingressClassName: kong
  rules:
    - http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: router-test
                port:
                  number: 80
